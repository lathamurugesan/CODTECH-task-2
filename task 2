import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
df=pd.read_csv(r'C:\Users\Hema\Downloads\USA_Housing.csv')
df.head()
df.tail()
print(df.isnull().sum())
X = df[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms',
'Avg. Area Number of Bedrooms', 'Area Population']]
y = df['Price']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=101)
lm = LinearRegression()
lm.fit(X_train,y_train)
y_pred = lm.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"Mean Squared Error (MSE): {mse}")
print(f"Mean Absolute Error (MAE): {mae}")
print(f"R-squared (R2): {r2}")
coefficients = pd.DataFrame({'feature': X.columns, 'coefficient': lm.coef_})
print(coefficients)
predictions = lm.predict(X_test)
plt.scatter(y_test,predictions)
# Manually input features for prediction
new_data = np.array([[700000, 5, 6, 4, 240000]]) 
# Make predictions on the new data
predicted_price = lm.predict(new_data)
print(f"Predicted Price: {predicted_price[0]}")

